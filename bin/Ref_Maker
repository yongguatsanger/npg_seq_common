#!/usr/bin/env perl

use strict;
use warnings;
use FindBin qw($Bin);
use lib ( -d "$Bin/../lib/perl5" ? "$Bin/../lib/perl5" : "$Bin/../lib" );
use Carp;
use English qw(-no_match_vars);
use File::Basename;
use File::chdir;
use File::Copy;
use File::Path qw(make_path remove_tree);
use File::Spec::Functions qw(catfile);
use Getopt::Long;
use IPC::Open3;
use JSON;
use List::Util qw(sum);
use Moose::Meta::Class;
use Perl6::Slurp;
use POSIX qw(strftime);
use autodie qw(:all);
use Readonly;
use npg_tracking::util::abs_path qw(abs_path);

our $VERSION = '0';

Readonly::Array  my @ALIGNERS             => qw{ bowtie bowtie2 bwa bwa0_6 samtools star };
Readonly::Scalar my $DIR_PERM             => oct 755;
Readonly::Scalar my $BWA_ALGORITHM_CUTOFF => 1_200_000_000;
Readonly::Scalar my $SKIP_STRING => "\n*** Skipping to next aligner ***\n\n";

my $ref_size;
my $working_dir;
my @files;
my $status = main();
exit $status;

sub main { ##no critic (Subroutines::ProhibitExcessComplexity)

    my %build = (
        blat        => 0,
        bowtie      => 0,
        bowtie2     => 0,
        bwa         => 0,
        bwa0_6      => 0,
        longranger  => 0,
        npgqc       => 0,
        picard      => 0,
        samtools    => 0,
        star        => 0,
    );
    GetOptions( \%build, keys %build ) or croak 'Error in command line arguments';

    my $fasta_regex = qr{[.]f(?:ast|n)?a}imsx;
    my ( %arguments, %version, %convert_command );

    # First make sure we're in the right place.
    croak 'No fasta directory found.' if !-d 'fasta';

    $working_dir = $CWD;

    # There should be one fasta file in the fasta subdirectory.
    opendir my $dh, 'fasta';
    @files = grep {m/$fasta_regex\z/imsx} readdir $dh;
    closedir $dh;
    croak 'One and only one fasta file expected.' if scalar @files != 1;

    print {*STDOUT} catfile( $CWD, 'fasta', $files[0] ), "\n" or carp $OS_ERROR;
    $ref_size = -s "fasta/$files[0]";

    # If no arguments were supplied build all index files, except longranger
    if ( sum( values %build ) == 0 ) {
        foreach my $k ( keys %build ) { $build{$k} = 1; }
        $build{'longranger'} = 0;
    }

    # bwa uses a different algorithm depending on the size of the reference.
    # For files between 10MB and 2GB either can be used.
    my $bwa_algorithm = ( $ref_size > $BWA_ALGORITHM_CUTOFF ) ? 'bwtsw' : 'is';


    # Build the conversion arguments.
    $arguments{'bowtie'}   = "-build -f -q $files[0] $files[0]";
    $arguments{'bowtie2'}  = "-build $files[0] $files[0]";
    $arguments{'bwa'}      = " index -p $files[0] -a $bwa_algorithm $files[0]";
    $arguments{'bwa0_6'}   = " index -p $files[0] -a $bwa_algorithm $files[0]";
    $arguments{'maq'}      = " fasta2bfa $files[0] $files[0].bfa";
    $arguments{'samtools'} = " faidx $files[0]";
    $arguments{'star'}     = " --runMode genomeGenerate --genomeDir ./ --genomeFastaFiles ../fasta/$files[0]";

    my @failed; # record any failures
    my %subs = ();
    $subs{'blat'}       = \&blat;
    $subs{'longranger'} = \&longranger;
    $subs{'picard'}     = \&picard;
    $subs{'npgqc'}      = \&gc_frac;

    foreach my $tool (keys %subs) {
        if ($build{$tool}) {
            if (!$subs{$tool}->()) { push @failed, $tool; }
            chdir $working_dir;
        }
    }

    my $rm = _get_rm();

    foreach my $aligner (@ALIGNERS) {
        next if !$build{$aligner};

        clean_slate($aligner); # Makes a subdirectory to hold the output.
        my $executable = $aligner;

        my $command = $aligner eq 'bowtie2' ? 'bowtie2-build' : $aligner. '_cmd';
        $version{$aligner} = $rm->current_version($rm->$command);
        if ( !$version{$aligner} ) {
            carp "Version string not found for $aligner, continuing without";
        }

        copy( "fasta/$files[0]", "$aligner/$files[0]" );    # Can't rely on links.
        $CWD = $aligner;

        # Do the conversions.
        $convert_command{$aligner} = $executable . $arguments{$aligner};
        print {*STDERR} "\n$convert_command{$aligner}\n\n" || carp;
        log_timestamp( 'start', $aligner );
        my $success = eval { system $convert_command{$aligner}; 1; };
        if (!$success) { push @failed, $aligner; }

        chdir $working_dir;
        my $to_unlink = "$aligner/$files[0]";
        if (-e $to_unlink) {
            unlink $to_unlink;
        }

        #tophat expects to find reference file next to bowtie2 indices
        #and the reference extension is expected to be .fa
        if ($aligner eq 'bowtie2') {
            my $target = "../fasta/$files[0]";
            my $link = "$aligner/$files[0]" . q[.fa];
            carp "bowtie2: soft-linking $link to $target";
            symlink $target, $link;
        }

        log_timestamp( $success ? 'stop' : 'abort', $aligner );
    }

    # samtools requires its index file to be in the same directory as the fasta
    # Check first that the samtools command worked above.
    if ($build{'samtools'}) {
        create_symlink("samtools/$files[0].fai","fasta/$files[0].fai");
    }

    # RNA SeQc requires dict file in same directory as the fasta
    if ($build{'picard'}) {
        create_symlink("picard/$files[0].dict","fasta/$files[0].dict");
    }


    if (@failed) {
        my $message = 'WARNING: Task(s) failed, see Ref_Maker output for '.
            'details: '.join(', ', @failed)."\n";
        print {*STDERR} $message or carp $OS_ERROR;
        return 1;
    } else {
        return 0;
    }
} ################### end of the main part #############################

sub gc_frac{

    my $gcfr_command = File::Spec->catfile( $Bin, 'base_count_maker' );
    log_timestamp( 'start', 'gc_frac' );
    eval {
      system $gcfr_command; 1;
    } or do {
      carp "*** base_count_maker failed: $EVAL_ERROR. $SKIP_STRING";
      log_timestamp( 'abort', 'gc_frac' );
      return 0;
    };
    log_timestamp( 'stop', 'gc_frac' );
    return 1;
}

sub picard {

    my $dict_jar = _get_rm()->csd_jar();

    clean_slate('picard');

    my $picard_out = 'picard/' . $files[0];
    $picard_out .= '.dict';

    my $fasta_file_abs_path = abs_path("fasta/$files[0]");
    my ( $species, $genome_assembly ) = ( q{}, q{} );

    my $uri_json_file = '../uri.json';
    my $uri;

    if ( -e $uri_json_file ) {

        my $uri_json     = slurp($uri_json_file);
        my $uri_hashref  = from_json($uri_json);
        $uri             = $uri_hashref->{URI};
        $genome_assembly = $uri_hashref->{GENOME_ASSEMBLY};
        $species         = $uri_hashref->{SPECIES};
    }

    my $picard_command =
        "java -jar $dict_jar R= fasta/$files[0] O= $picard_out";

    if ($uri) {
        $picard_command .= " URI='$uri'";
    }

    if ( !$genome_assembly ) {
        ($genome_assembly) =
            $fasta_file_abs_path =~ m{/ ([^/]+)/ [^/]+/ fasta/ [^/]+ $}msx;
        $genome_assembly =~ s/_/ /msx;
    }

    if ($genome_assembly) {
        $picard_command .= " GENOME_ASSEMBLY='$genome_assembly'";
    }

    if ( !$species ) {
        ($species) = $fasta_file_abs_path
            =~ m{/ ([^/]+)/ (?:[^/]+/){2} fasta/ [^/]+ $}msx;
        $species =~ s/_/ /msx;
    }

    if ($species) {
        $picard_command .= " SPECIES='$species'";
    }

    log_timestamp( 'start', 'picard' );
    eval { system $picard_command; 1; }
        or do {
            carp "*** picard failed: $EVAL_ERROR. $SKIP_STRING";
            log_timestamp( 'abort', 'picard' );
            return 0;
        };

    log_timestamp( 'stop', 'picard' );
    return 1;
}

sub longranger {

    clean_slate('longranger');

    my $executable = q{longranger};
    my $longranger_command = qq{$executable mkref ../fasta/$files[0]};
    $CWD = q{./longranger};

    log_timestamp( 'start', 'longranger' );
    eval { system $longranger_command; 1; }
        or do {
            carp "*** longranger conversion failed: $EVAL_ERROR $SKIP_STRING";
            log_timestamp( 'abort', 'longranger' );
            return 0;
        };

    $CWD = q{..};

    my $target = "longranger/refdata-$files[0]";
    $target =~ s/[.]fa$//smx;
    my $link = q{10X};
    move($target, $link);
    $target = q{longranger};
    remove_tree($target);

    log_timestamp( 'stop', 'longranger' );
    return 1;
}

sub blat {
    clean_slate('blat');

    my $blat_command = qq{faToTwoBit -noMask fasta/$files[0] blat/$files[0].2bit};
    eval { system $blat_command; 1; }
    or do {
        carp "*** blat conversion failed: $EVAL_ERROR $SKIP_STRING";
        log_timestamp( 'abort', 'blat' );
        return 0;
    };
    log_timestamp( 'stop', 'blat' );
    return 1;
}

sub clean_slate {
    my ($dirname) = @_;

    # Start with a clean slate.
    ( -e $dirname ) && remove_tree($dirname);
    make_path( $dirname, { mode => $DIR_PERM } );

    return;
}

sub log_timestamp {
    my ( $state, $job ) = @_;

    my $message = sprintf "%s: %s %% %s\n", uc $state, $job, time;
    print {*STDOUT} $message or carp $OS_ERROR;

    return;
}

sub create_symlink{

    my($source,$target) = @_;

    eval {
        croak qq{$source file not found} if !-e $source;

        # This can fail if $target is a broken link.
        ( -e $target ) && ( unlink $target );

        symlink qq{../$source}, $target;
        1;
    } or do {
        carp "Error symlinking $target file: $EVAL_ERROR $SKIP_STRING";
    };

    return;
}

sub _get_rm {
    my $rm_class = Moose::Meta::Class->create_anon_class(
        roles => [qw/npg_common::roles::software_location/]);
    $rm_class->add_attribute('csd_jar'       => (
            is            => q{ro},
            isa           => 'NpgCommonResolvedPathJarFile',
            default       => 'CreateSequenceDictionary.jar',
            coerce        => 1,));
    $rm_class->add_attribute('bowtie2-build' => (
            is            => 'ro',
            isa           => 'NpgCommonResolvedPathExecutable',
            default       => 'bowtie2-build',
            coerce        => 1,));
    return $rm_class->new_object();
}

__END__


=head1 NAME

Ref_Maker - loop through all the indexing programs for the various aligners we
use.

=head1 VERSION


=head1 SYNOPSIS

Change cwd to parent directory of fasta subdirectory in the reference
repository.

    C<perl Ref_Maker>

If you specify aligners as arguments only those index files will be built.

    C<perl Ref_Maker --picard --bwa>

=head1 DESCRIPTION

Produce all the various index files required for the various aligners used by
NPD from a given fasta file.

Create a link from samtools/reference.fai to fasta/reference.fai, as samtools
expects to find these files in the same place.

Call it from a given subset node of the reference repository, e.g. 'all'. It
should be easy to write a wrapper to run it in all subset nodes below a given
higher node - e.g. strain/version or organism.

It finishes by printing some text suitable for pasting into the README file
for the reference sequence, giving the version of the software used and the
full command called to convert the reference.

=head1 USAGE

To run under LSF you need to reserve memory. 5.5 times the size of the fasta
file should be safe. E.g. for a 1Gb genome, the syntax is:

bsub -qlong -M5500000 -R'select[mem>5500] rusage[mem=5500]' perl Ref_Maker

This is due to bwa's 'is' algorithm, I don't know the memory requirements
for the 'bwtsw' algorithm, but it should be a lot less.

Most vertebrate genomes (and the contamination check genome) should be run
on the 'long' queue. Smaller genomes will be fine on 'normal'.

When adding a new aligner use $fastq[0] as the basename for the index files.


=head1 SUBROUTINES/METHODS

=head2 gc_frac

Run base_count_maker

=head2 picard

Run CreateSequenceDictionary

=head2 longranger

Create longranger mkref

=head2 blat

Create blat index

=head2 clean_slate

Delete and previous version/attempt and create a fresh directory.

=head2 log_timestamp

Log a timestamp for the start or end (normal or aborted) of an aligner job.

=head2 create_symlink

Create a symlink between a source and target

=head1 REQUIRED ARGUMENTS

=head1 OPTIONS

=head1 EXIT STATUS

=head1 DIAGNOSTICS

=head1 DEPENDENCIES

=over

=item strict

=item warnings

=item autodie

=item Carp

=item English

=item Readonly

=item File::Basename

=item File::chdir

=item File::Copy

=item File::Path

=item File::Spec::Functions

=item FindBin

=item Getopt::Long

=item IPC::Open3

=item JSON

=item List::Util

=item Moose::Meta::Class

=item Perl6::Slurp

=item POSIX

=item npg_tracking::util::abs_path

=back

=head1 BUGS AND LIMITATIONS

Some aligners fail on a combination of a large genome size and a high number
of sequences - but the Ref_Maker script should handle it gracefully and pass
on to the next aligner.

Because one of the aligners uses the full fasta file name as the basename for
its output, i.e. without stripping the suffix away, this behaviour has been
copied for all the aligners. It's ugly but consistent.

=head1 DIAGNOSTICS

=head1 INCOMPATIBILITIES

=head1 CONFIGURATION

=head1 CONFIGURATION AND ENVIRONMENT

Requires a subdirectory called 'fasta' to be present in the working directory.
This subdirectory should contain the fasta file to be converted and no other
fasta files.

=head1 AUTHOR

John O'Brien
Marina Gourtovaia

=head1 LICENSE AND COPYRIGHT

Copyright (C) 2017 GRL

This file is part of NPG.

NPG is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut

