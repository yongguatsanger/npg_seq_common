#!/usr/bin/env perl
#########
# Author:        John O'Brien
# Created:       2008-06-17

package FastaFormat;

use strict;
use warnings;
use Carp;
use English qw(-no_match_vars);
use File::Temp qw(tempfile);
use autodie qw(:all);
use File::Copy;
use Readonly;

our $VERSION = '0';

Readonly::Scalar my $DEFAULT_LINE_LENGTH => 80;

croak 'No argument supplied' if !defined $ARGV[0];

my $line_length = $DEFAULT_LINE_LENGTH;
my @fasta_list;

foreach (@ARGV) {
    if (m/^ ([1-9]\d*) $/msx) {    # Don't allow leading zeros.
        $line_length = $1;
        next;
    }

    ( -e )
        ? ( push @fasta_list, $_ )
        : ( warn "$_ not found. Skipping...\n" );
}


foreach my $input_fasta (@fasta_list) {

    copy( $input_fasta, $input_fasta . q{~} );
    my ( $output_fh, $output_fasta ) = tempfile();

    open my $input_fh, q{<}, $input_fasta;
    parse_fasta( $input_fh, $output_fh, $input_fasta );
    close $input_fh;

    close $output_fh;
    unlink $input_fasta;

    copy( $output_fasta, $input_fasta ) or croak $OS_ERROR;
}


sub parse_fasta {
    my ( $seq_in, $seq_out, $infile ) = @_;

    croak 'Name of input fasta file required' if !$infile;

    my $sequence    = q{};
    my $line_number = 0;

    while (<$seq_in>) {
        $line_number++;

        # At new headers print any sequence left from the previous entry.
        if (m/^[>;]/msx) {
            s/^([>;])\s+/$1/msx;    # There should be no space there.

            if ($sequence) {
                print {$seq_out} "$sequence\n" || croak $OS_ERROR;
                $sequence = q{};
            }

            # Then print the new header and get the next input line.
            print {$seq_out} $_ || croak $OS_ERROR;
            next;
        }

        # Make sure the new sequence has only legitimate characters.
        if (m/([^[:space:]A-IK-Z*-]+)/imsx) {
            my $ifc = $1;
            die "Illegal fasta character(s), '$ifc' , in $infile at line"
                . " $line_number.\n";
        }

        # From here we have sequence data. Clean it, chop it, print it.
        $sequence .= $_;
        $sequence =~ s/\s//gmsx;

        while ( length $sequence >= $line_length ) {
            print {$seq_out} substr( $sequence, 0, $line_length ), "\n"
                || croak $OS_ERROR;
            $sequence = substr $sequence, $line_length;
        }

        # If this is the end of the file, print what's left.
        if (eof) {
            print {$seq_out} "$sequence\n" || croak $OS_ERROR;
            $sequence = q{};
        }
    }

    return;
}


1;

__END__

=head1 NAME

FastaFormat - make sure all sequence lines in fasta files are the same length.

=head1 VERSION

=head1 SYNOPSIS

    C<<FastaFormat file1.fasta [file2.fasta] ... [int] ... [fileN.fasta]    

=head1 DESCRIPTION

Edit all the fasta files supplied as arguments, reformatting the sequence
lines so that they are the same length (except the final line in each
sequence, which may be shorter), and stripping any white space.

Any number of fasta files may be supplied as arguments. The script will test
that the files can be found and also that they are legitimate fasta format
sequence files. In practice this just means that it will croak if there are
any non IUB/IUPAC amino acid or nucleic acid codes in the sequence. (Spaces
within the sequence are illegal, but the script will just silently remove
those.)

If any of the arguments is an unsigned integer (with no leading zeros) the
script will use this argument as the line length. If there are multiple such
arguments the script will use the last one found. Otherwise a default value of
eighty will be used.

The script saves a backup for each fasta file processed, using the same name
and adding a tilde (~) to the end.

=head1 USAGE

=head1 SUBROUTINES/METHODS

=head1 REQUIRED ARGUMENTS

=head1 OPTIONS

=head1 EXIT STATUS

=head1 DIAGNOSTICS

=head1 CONFIGURATION

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=over

=item strict

=item warnings

=item autodie

=item Carp

=item English

=item File::Temp

=item File::Copy

=back

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

Please inform the author of any found. 

=head1 AUTHOR

John O'Brien, E<lt>jo3@sanger.ac.ukE<gt>

=head1 LICENSE AND COPYRIGHT

Copyright (C) 2010 GRL, by John O'Brien

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut

